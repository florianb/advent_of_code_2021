# Day 1

## Part 1

```elixir
Mix.install([{:nx, github: "elixir-nx/nx", sparse: "nx"}])

# contents = """
# 0,9 -> 5,9
# 8,0 -> 0,8
# 9,4 -> 3,4
# 2,2 -> 2,1
# 7,0 -> 7,4
# 6,4 -> 2,0
# 0,9 -> 2,9
# 3,4 -> 1,4
# 0,0 -> 8,8
# 5,5 -> 8,2
# """

{:ok, contents} = File.read("inputs/day_5.txt")

data =
  contents
  |> String.split("\n", trim: true)
  |> Enum.map(fn row ->
    row |> String.split([",", " ", "->"], trim: true) |> Enum.map(&String.to_integer/1)
  end)
  # Let's keep only the straight lines first
  |> Enum.filter(fn [x1, y1, x2, y2] -> x1 == x2 or y1 == y2 end)
  |> Enum.map(fn
    # for simplicity, let's ensure they always go from low to high
    [x1, y, x2, y] ->
      [min(x1, x2), y, max(x1, x2), y]

    [x, y1, x, y2] ->
      [x, min(y1, y2), x, max(y1, y2)]
  end)

t = Nx.tensor(data)
```

```elixir
{n, _} = t.shape

indices =
  data
  |> Enum.flat_map(fn
    # Generate all intermediate indices
    [x1, y, x2, y] ->
      Enum.map(x1..x2//1, &[y, &1])

    [x, y1, x, y2] ->
      Enum.map(y1..y2//1, &[&1, x])
  end)
  |> Nx.tensor()

[max_x, max_y] = Nx.reduce_max(indices, axes: [0]) |> Nx.to_flat_list()
grid = Nx.broadcast(0, {max_x + 1, max_y + 1})

updates = Nx.broadcast(1, {elem(indices.shape, 0)})

# Add 1 to each indexed position
Nx.indexed_add(grid, indices, updates)
|> Nx.greater(1)
|> Nx.sum()
```

## Part 2

```elixir
indices =
  contents
  |> String.split("\n", trim: true)
  |> Enum.map(fn row ->
    row |> String.split([",", " ", "->"], trim: true) |> Enum.map(&String.to_integer/1)
  end)
  |> Enum.flat_map(fn
    # For straight lines, we just generate the whole range at once
    [x1, y, x2, y] ->
      Enum.map(x1..x2, &[y, &1])

    [x, y1, x, y2] ->
      Enum.map(y1..y2, &[&1, x])

    # For diagonals, we need to combine the ranges
    [x1, y1, x2, y2] ->
      Enum.zip_with(x1..x2, y1..y2, fn x, y -> [y, x] end)
  end)
  |> Nx.tensor()

[max_x, max_y] = Nx.reduce_max(indices, axes: [0]) |> Nx.to_flat_list()

grid = Nx.broadcast(0, {max_y + 1, max_x + 1})

updates = Nx.broadcast(1, {elem(indices.shape, 0)})

Nx.indexed_add(grid, indices, updates)
|> Nx.greater(1)
|> Nx.sum()
```
